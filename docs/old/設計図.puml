@startuml クラス図
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle

' --- Standard Modules ---
package "Standard Modules" {
    class Logger_SingletonManager {
        -pLogger: Logger_Facade
        +GetMyLogger(): Logger_Facade
    }
}

' --- Class Modules ---
package "Class Modules" {
  interface ILogWriter {
    +Initialize()
    +WriteLog(logInfo: LoggerLogInfoStruct)
    +Terminate()
  }

  class Logger_Controller {
    -metadataProvider: Logger_MetadataProvider
    -writers: Collection<ILogWriter>
    -currentLogInfo: LoggerLogInfoStruct
    -includeCallerInfo: Boolean
    -moduleName: String
    -procedureName: String
    +SetModuleName(name: String)
    +SetProcedureName(name: String)
    +Initialize(config: LoggerConfigStruct)
    +AddWriter(writer: ILogWriter)
    +InitializeWriters()
    +WriteLog(logInfo: LoggerLogInfoStruct)
    +TerminateWriters()
    -GetTagName(tag: LoggerLogTag): String
  }

  class Logger_Facade {
    -controller: Logger_Controller
    -isInitialized: Boolean
    +Initialize(config: LoggerConfigStruct)
    +Log(message: String, tag: LoggerLogTag = LogTag_Info)
    +SetCallerInfo(moduleName: String, procedureName: String)
    +Terminate()
  }

  class Logger_MetadataProvider {
    +AttachMetadata(logInfo: LoggerLogInfoStruct)
  }

  class Logger_Writer_Excel <<ILogWriter>> {
    -outputSheet: Worksheet
    -currentRow: Long
    +SetTargetSheet(sheet: Worksheet)
    +Initialize()
    +WriteLog(logInfo: LoggerLogInfoStruct)
    +Terminate()
  }

  class Logger_Writer_Immediate <<ILogWriter>> {
    +Initialize()
    +WriteLog(logInfo: LoggerLogInfoStruct)
    +Terminate()
  }
}

' --- Relationships ---
Logger_SingletonManager --> Logger_Facade : provides singleton instance
Logger_Facade --> Logger_Controller : uses
Logger_Controller ---> Logger_MetadataProvider : uses
Logger_Controller o--- "0..*" ILogWriter : writers
Logger_Writer_Excel ...|> ILogWriter
Logger_Writer_Immediate ...|> ILogWriter



@enduml
