@startuml クラス図
title VBA Logger Class Diagram (Dependencies)

package UserInterface {
    class Logger_SingletonManager << (M,66CCFF) Module >> #LightBlue ##black {
        - mLogger As Logger_Facade
        + NewMyLogger() : Logger_Facade
        + MyLogger() : Logger_Facade
        + ReleaseMyLogger()
    }
    note top of Logger_SingletonManager
        **NewMyLogger.Initialize(LoggerConfigStruct)**
        
        インスタンスを作成し、mLogger に保管、mLogger をユーザーに渡す
        LoggerConfigStruct を引数にして初期化処理を呼ぶ

        **MyLogger.Log("LogMessage", LoggerLogTag.Warning)**

        mLogger をユーザーに渡す
        常に同じ初期化済みの Logger_Facade インスタンスを提供する
        Logger_Facade のメソッドを呼び出してログ出力を指示する
    end note

    class Logger_TracerHelper << (M,66CCFF) Module >> #LightBlue ##black {
        + UsingTracer(ModuleName, ProcName) : Logger_ProcedureTracer
    }
    note top of Logger_TracerHelper
        **Dim scopeGuard = UsingTracer("ModuleName", "ProcName")**
        
        関数のローカル変数として Logger_ProcedureTracer のインスタンスを作成する
        関数が終了すると、Logger_ProcedureTracer が解放され、終了処理が行われる
        初期化処理と終了処理にてコールスタック情報を更新する
        その際、Logger_Facade.Log() を呼び出しログ出力も行う
    end note

}

class Logger_Facade {
    + Initialize(LoggerConfigStruct)
    + Log(LogMessage, LoggerLogTag)
    + Terminate()
    ~ EnterProcedure()
    ~ ExitProcedure()
}
note right of Logger_Facade
    EnterProcedure()、ExitProcedure()
    のアクセスレベルは Friend
    ユーザーは直接呼び出せない
    Logger_TracerHelper を通じて間接的に呼び出される
end note


class Logger_Controller {
    - Collection of Logger_ILogWriter
    + Initialize()
    + WriteLog(LoggerLogInfoStruct)
    + EnterProcedureContext()
    + ExitProcedureContext()
    + TerminateWriters()
}

interface Logger_ILogWriter {
    + Initialize()
    + WriteLog(LoggerLogInfoStruct)
    + Terminate()
}

class Logger_MetadataProvider {
    + EnrichLogEntry(LoggerLogInfoStruct)
    - GetTimestamp()
    - GetTagName()
    - GetCallerInfo()
}

class Logger_ProcedureTracer {
    + Init(ModuleName, ProcName)
    + Class_Terminate()
}

package "Log Writers" {
    class Logger_Writer_Excel {
    }

    class Logger_Writer_Immediate {
    }
}

package "Data Structures (Type / Enum)" {
    struct LoggerConfigStruct << (T,FFFFCC) Type >>
    struct LoggerLogInfoStruct << (T,FFFFCC) Type >>
    enum LoggerLogTag
}

' --- Relationships ---
' Core Component Dependencies
Logger_SingletonManager --> Logger_Facade : uses >
Logger_Facade --> Logger_Controller : uses >
Logger_Controller --> Logger_MetadataProvider : uses >

Logger_Controller o--> "*" Logger_ILogWriter : holds collection \n uses >
Logger_ILogWriter <|.. Logger_Writer_Excel
Logger_ILogWriter <|.. Logger_Writer_Immediate

' Call Stack Tracing Dependencies
Logger_ProcedureTracer --> Logger_Facade : uses >
Logger_TracerHelper --> Logger_ProcedureTracer : uses >

Logger_Controller -[hidden]--> LoggerConfigStruct

@enduml
